- hosts: gatewayserver
  become: true
  gather_facts: false

  vars:
    be_repo_url: "https://github.com/abimsyaefulloh/be-dumbmerch.git"
    be_repo_version: "main"
    be_repo_dest: "/opt/be-dumbmerch-staging"

    be_container_name: "be-dumbmerch-staging"
    be_host_port: 5002 # <- sesuai nginx staging backend
    be_container_port: 5002 # app listen PORT=5002 di dalam container

    # Koneksi ke Postgres EXISTING (container: dumbmerch-db publish 5432)
    db_container: "dumbmerch-db"
    db_port: 5432
    db_user: "abim"
    db_password: "abim123"
    db_name_staging: "dumbmerch_staging"

  tasks:
    - name: Ensure workdir exists
      file:
        path: "{{ be_repo_dest }}"
        state: directory

    - name: Clone BE repo (staging)
      git:
        repo: "{{ be_repo_url }}"
        dest: "{{ be_repo_dest }}"
        version: "{{ be_repo_version }}"
        force: true

    - name: Generate Dockerfile (Go) for BE
      copy:
        dest: "{{ be_repo_dest }}/Dockerfile"
        content: |
          FROM golang:1.20-alpine
          WORKDIR /app
          RUN apk add --no-cache git
          COPY go.mod go.sum ./
          RUN go mod download
          COPY . .
          RUN go build -o main .
          EXPOSE 5002
          CMD ["./main"]

    # Penting: BE STAGING connect ke Postgres host (bukan service "db" compose yang prod).
    # Pakai host.docker.internal via host-gateway agar container bisa akses 127.0.0.1:5432 di host.
    - name: Create docker-compose.staging.yml for BE
      copy:
        dest: "{{ be_repo_dest }}/docker-compose.staging.yml"
        content: |
          services:
            backend-staging:
              build: .
              container_name: {{ be_container_name }}
              environment:
                PORT: "5002"
                DB_HOST: host.docker.internal
                DB_PORT: "{{ db_port }}"
                DB_USER: {{ db_user }}
                DB_PASSWORD: {{ db_password }}
                DB_NAME: {{ db_name_staging }}
              extra_hosts:
                - "host.docker.internal:host-gateway"
              ports:
                - "{{ be_host_port }}:{{ be_container_port }}"
              restart: always

    - name: Ensure staging database exists in Postgres
      shell: |
        docker exec -i {{ db_container }} psql -U {{ db_user }} -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='{{ db_name_staging }}'" | grep -q 1 \
        || docker exec -i {{ db_container }} psql -U {{ db_user }} -d postgres -c "CREATE DATABASE {{ db_name_staging }};"
      register: dbcreate
      changed_when: "'CREATE DATABASE' in (dbcreate.stdout | default(''))"

    - name: Compose up BE staging
      command: docker compose -f docker-compose.staging.yml up -d --build
      args:
        chdir: "{{ be_repo_dest }}"

    - name: Show BE staging URL
      debug:
        msg: "BE staging via Nginx: http://api.staging.abimft.studentdumbways.my.id  (proxy ke port {{ be_host_port }})"
