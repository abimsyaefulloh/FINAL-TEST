---
- name: Deploy Private Docker Registry behind Nginx (TLS)
  hosts: gatewayserver
  become: yes

  vars:
    # ==== SESUAIKAN DI SINI ====
    registry_domain: "registry.abimft.studentdumbways.my.id"
    ssl_cert_path: "/etc/letsencrypt/live/abimft.studentdumbways.my.id/fullchain.pem"
    ssl_key_path: "/etc/letsencrypt/live/abimft.studentdumbways.my.id/privkey.pem"

    registry_user: "abimsyaefulloh"
    registry_password: "Hikitaka@123"

    registry_data_dir: "/var/lib/registry"
    registry_auth_dir: "/etc/docker/registry/auth"
    registry_htpasswd_file: "/etc/docker/registry/auth/htpasswd"
    registry_listen_port: "5001"

  collections:
    - community.docker
    - community.general

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

  tasks:
    # --------- BASE DEPS (tidak bikin konflik) ---------
    - name: Install base deps (nginx, passlib, python3-docker, repo tools)
      apt:
        name:
          - nginx
          - python3-passlib
          - python3-docker
          - ca-certificates
          - curl
          - gnupg
          - apt-transport-https
          - lsb-release
        state: present
        update_cache: yes

    # --------- CEK DOCKER ----------
    - name: Check Docker installed
      command: docker --version
      register: docker_check
      ignore_errors: true
      changed_when: false

    # --------- INSTALL DOCKER CE (HANYA jika belum ada) ----------
    - block:
        - name: Remove potentially conflicting Docker packages (ignore if missing)
          apt:
            name: "{{ item }}"
            state: absent
            purge: yes
          loop:
            - docker.io
            - docker-doc
            - docker-compose
            - docker-compose-plugin
            - podman-docker
            - containerd # paket Ubuntu
            - containerd.io # paket repo Docker
            - runc
          ignore_errors: true
          failed_when: false

        - name: Add Docker GPG key (official)
          shell: |
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
          args:
            creates: /etc/apt/keyrings/docker.gpg

        - name: Add Docker apt repository (official)
          copy:
            dest: /etc/apt/sources.list.d/docker.list
            content: |
              deb [arch={{ ansible_architecture | default('amd64') }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename | default('jammy') }} stable

        - name: Install Docker CE stack
          apt:
            update_cache: yes
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present

        - name: Enable & start Docker
          service:
            name: docker
            state: started
            enabled: yes
      when: docker_check.rc != 0

    # --------- FOLDER & AUTH ----------
    - name: Ensure directories for registry data & auth exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      loop:
        - "{{ registry_data_dir }}"
        - "{{ registry_auth_dir }}"

    - name: Create/Update htpasswd user (bcrypt)
      community.general.htpasswd:
        path: "{{ registry_htpasswd_file }}"
        name: "{{ registry_user }}"
        password: "{{ registry_password }}"
        crypt_scheme: bcrypt
        owner: root
        group: root
        mode: "0640"

    # --------- CONTAINER REGISTRY ----------
    - name: Run Docker Registry container (bind to 127.0.0.1:{{ registry_listen_port }})
      community.docker.docker_container:
        name: registry
        image: registry:2
        restart_policy: always
        published_ports:
          - "127.0.0.1:{{ registry_listen_port }}:5000"
        env:
          REGISTRY_HTTP_ADDR: "0.0.0.0:5000"
          REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: "/var/lib/registry"
          REGISTRY_AUTH: "htpasswd"
          REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
          REGISTRY_AUTH_HTPASSWD_PATH: "/auth/htpasswd"
        volumes:
          - "{{ registry_data_dir }}:/var/lib/registry"
          - "{{ registry_auth_dir }}:/auth"

    # --------- NGINX REVERSE PROXY + TLS ----------
    - name: Write Nginx server block for registry
      copy:
        dest: /etc/nginx/sites-available/registry.conf
        mode: "0644"
        content: |
          # Redirect HTTP -> HTTPS
          server {
              listen 80;
              server_name {{ registry_domain }};
              return 301 https://$host$request_uri;
          }

          # HTTPS reverse proxy to local registry
          server {
              listen 443 ssl http2;
              server_name {{ registry_domain }};

              ssl_certificate     {{ ssl_cert_path }};
              ssl_certificate_key {{ ssl_key_path }};

              # large uploads (image layers)
              client_max_body_size 0;

              # required by Docker Registry API
              add_header Docker-Distribution-Api-Version "registry/2.0" always;

              # expose only the registry API
              location /v2/ {
                  proxy_pass http://127.0.0.1:{{ registry_listen_port }};

                  proxy_set_header Host              $host;
                  proxy_set_header X-Real-IP         $remote_addr;
                  proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;

                  # avoid buffering big request bodies
                  proxy_request_buffering off;

                  proxy_http_version 1.1;
              }

              # block other paths
              location / {
                  return 404;
              }
          }

    - name: Enable registry site
      file:
        src: /etc/nginx/sites-available/registry.conf
        dest: /etc/nginx/sites-enabled/registry.conf
        state: link
        force: true

    - name: Remove default Nginx site (optional)
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Test Nginx config
      command: nginx -t
      register: nginx_test
      changed_when: false

    - name: Reload Nginx
      when: nginx_test.rc == 0
      notify: reload nginx
      meta: noop

    # --------- TIPS OUTPUT ----------
    - name: Tips login & push
      debug:
        msg:
          - "Login: docker login {{ registry_domain }}  (user={{ registry_user }})"
          - "Tag:   docker tag nginx:alpine {{ registry_domain }}/nginx:alpine-test"
          - "Push:  docker push {{ registry_domain }}/nginx:alpine-test"
