- hosts: gatewayserver
  become: true
  gather_facts: true

  vars:
    repo_url: "https://github.com/abimsyaefulloh/be-dumbmerch.git"
    repo_version: "main"
    repo_dest: "/opt/be-dumbmerch"

    image_name: "be-dumbmerch"
    container_name: "be-dumbmerch"

    host_port: 5000
    container_port: 5000

    db_container: "dumbmerch-db"
    db_image: "postgres:14"
    db_host_port: 5432
    db_name: "dumbmerch"
    db_user: "abim"
    db_password: "abim123"

    docker_arch: "{{ 'arm64' if ansible_machine in ['aarch64','arm64'] else 'amd64' }}"
    deploy_user: "{{ ansible_user | default('ubuntu') }}"

  pre_tasks:
    - name: Remove old Docker packages (prevent conflict)
      apt:
        name:
          - docker.io
          - docker-doc
          - docker-compose
          - podman-docker
          - containerd
          - runc
        state: absent
        purge: yes
      ignore_errors: true

    - name: Install prerequisites
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
        state: present
        update_cache: true

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker apt repository
      apt_repository:
        repo: "deb [arch={{ docker_arch }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install Docker engine + tools
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - python3-docker
        state: present
        update_cache: true

    - name: Ensure Docker running & enabled
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Add current SSH user to docker group
      user:
        name: "{{ deploy_user }}"
        groups: docker
        append: true

  tasks:
    - name: Ensure app directory exists
      file:
        path: "{{ repo_dest }}"
        state: directory

    - name: Clone backend repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        version: "{{ repo_version }}"
        force: true

    - name: Generate Dockerfile for backend
      copy:
        dest: "{{ repo_dest }}/Dockerfile"
        content: |
          FROM golang:1.20-alpine

          WORKDIR /app
          RUN apk add --no-cache git

          COPY go.mod go.sum ./
          RUN go mod download

          COPY . .

          RUN go build -o main .

          EXPOSE 5000
          CMD ["./main"]

    - name: Generate docker-compose.yml
      copy:
        dest: "{{ repo_dest }}/docker-compose.yml"
        content: |
          services:
            backend:
              build: .
              container_name: {{ container_name }}
              environment:
                PORT: "5000"
                DB_HOST: db
                DB_PORT: "5432"
                DB_USER: {{ db_user }}
                DB_PASSWORD: {{ db_password }}
                DB_NAME: {{ db_name }}
              ports:
                - "{{ host_port }}:{{ container_port }}"
              depends_on:
                db:
                  condition: service_healthy
              restart: always
              healthcheck:
                test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:5000/api/v1/users > /dev/null 2>&1 || exit 1"]
                interval: 10s
                timeout: 5s
                retries: 12
                start_period: 20s

            db:
              image: {{ db_image }}
              container_name: {{ db_container }}
              restart: always
              environment:
                POSTGRES_USER: {{ db_user }}
                POSTGRES_PASSWORD: {{ db_password }}
                POSTGRES_DB: {{ db_name }}
              volumes:
                - db_data:/var/lib/postgresql/data
              ports:
                - "{{ db_host_port }}:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U {{ db_user }} -d {{ db_name }}"]
                interval: 10s
                timeout: 5s
                retries: 20
                start_period: 40s

          volumes:
            db_data:

    - name: Run docker compose up
      command: docker compose up -d
      args:
        chdir: "{{ repo_dest }}"

    - name: Print access URL
      debug:
        msg: "Backend API (PostgreSQL): http://{{ ansible_default_ipv4.address | default(inventory_hostname) }}:{{ host_port }}"
